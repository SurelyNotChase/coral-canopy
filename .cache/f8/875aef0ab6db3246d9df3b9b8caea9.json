{"id":"sALq","dependencies":[{"name":"C:\\Users\\Chase_Lear\\Documents\\Personal Documents\\RIT\\Courses\\Year4\\Capstone\\dream-canopy-2\\package.json","includedInParent":true,"mtime":1646697995124},{"name":"C:\\Users\\Chase_Lear\\Documents\\Personal Documents\\RIT\\Courses\\Year4\\Capstone\\dream-canopy-2\\node_modules\\@tensorflow\\tfjs-backend-webgl\\package.json","includedInParent":true,"mtime":1645506087312}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.TransformProgram=void 0;class n{constructor(n,o,t,a,l,e){this.variableNames=[\"Image\",\"Transforms\"],this.outputShape=e;const r=\"nearest\"===t?1:2;let i;switch(a){case\"constant\":i=1;break;case\"reflect\":i=2;break;case\"wrap\":i=3;break;case\"nearest\":i=4;break;default:i=1}this.userCode=`\\n            float mapCoord(float outCoord, float len) {\\n              float inCoord = outCoord;\\n              if(${i} == 2) {\\n                if (inCoord < 0.0) {\\n                  if (len <= 1.0) {\\n                    inCoord = 0.0;\\n                  } else {\\n                    float sz2 = 2.0 * len;\\n                    if (inCoord < sz2) {\\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\\n                      inCoord;\\n                    }\\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\\n                  }\\n                } else if (inCoord > len - 1.0) {\\n                  if (len <= 1.0) {\\n                    inCoord = 0.0;\\n                  } else {\\n                    float sz2 = 2.0 * len;\\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\\n                    if (inCoord >= len) {\\n                      inCoord = sz2 - inCoord - 1.0;\\n                    }\\n                  }\\n                }\\n                return clamp(inCoord, 0.0, len - 1.0);\\n              } else if (${i} == 3) {\\n                if (inCoord < 0.0) {\\n                  if (len <= 1.0) {\\n                    inCoord = 0.0;\\n                  } else {\\n                    float sz = len - 1.0;\\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\\n                  }\\n                } else if (inCoord > len - 1.0) {\\n                  if (len <= 1.0) {\\n                    inCoord = 0.0;\\n                  } else {\\n                    float sz = len - 1.0;\\n                    inCoord -= len * float(int(float(inCoord / sz)));\\n                  }\\n                }\\n                return clamp(inCoord, 0.0, len - 1.0);\\n              } else if (${i} == 4) {\\n                return clamp(outCoord, 0.0, len - 1.0);\\n              } else {\\n                return outCoord;\\n              }\\n            }\\n\\n            float readWithFillValue(int batch, int coordY, int coordX,\\n              int channel) {\\n              float outputValue;\\n              if (0 <= coordY && coordY < ${n} && 0 <= coordX && coordX < ${o}) {\\n                  outputValue = getImage(batch, coordY, coordX, channel);\\n              } else {\\n                outputValue = float(${l});\\n              }\\n              return outputValue;\\n            }\\n\\n            void main() {\\n              ivec4 coords = getOutputCoords();\\n              float outputValue;\\n              int batch = coords[0];\\n              int x = coords[2];\\n              int y = coords[1];\\n              int channel = coords[3];\\n              float xf = float(x);\\n              float yf = float(y);\\n              float a1 = getTransforms(batch, 0);\\n              float a2 = getTransforms(batch, 1);\\n              float a3 = getTransforms(batch, 2);\\n              float b1 = getTransforms(batch, 3);\\n              float b2 = getTransforms(batch, 4);\\n              float b3 = getTransforms(batch, 5);\\n              float c1 = getTransforms(batch, 6);\\n              float c2 = getTransforms(batch, 7);\\n              float projection = c1 * xf + c2 * yf + 1.0;\\n              if (projection == 0.0) {\\n                outputValue = float(${l});\\n              } else {\\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\\n                float mapX = mapCoord(inX, float(${o}));\\n                float mapY = mapCoord(inY, float(${n}));\\n\\n                if (${r} == 1) {\\n                  int coordY = int(round(mapY));\\n                  int coordX = int(round(mapX));\\n                  outputValue = readWithFillValue(batch, coordY, coordX,\\n                    channel);\\n                } else {\\n                  float yFloor = floor(mapY);\\n                  float xFloor = floor(mapX);\\n                  float yCeil = yFloor + 1.0;\\n                  float xCeil = xFloor + 1.0;\\n                  float valueYFloor = (xCeil - mapX) *\\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\\n                  (mapX - xFloor) *\\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\\n                  float valueYCeil = (xCeil - mapX) *\\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\\n                  (mapX - xFloor) *\\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\\n                  outputValue = (yCeil - mapY) * valueYFloor +\\n                  (mapY - yFloor) * valueYCeil;\\n                }\\n              }\\n              setOutput(outputValue);\\n            }\\n        `}}exports.TransformProgram=n;"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":20,"column":29},"generated":{"line":1,"column":0}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":20,"column":29},"generated":{"line":1,"column":13}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":20,"column":29},"generated":{"line":1,"column":20}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":20,"column":29},"generated":{"line":1,"column":35}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":20,"column":29},"generated":{"line":1,"column":43}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":20,"column":29},"generated":{"line":1,"column":56}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":20,"column":29},"generated":{"line":1,"column":57}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":20,"column":29},"generated":{"line":1,"column":64}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":20,"column":29},"generated":{"line":1,"column":68}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":20,"column":29},"generated":{"line":1,"column":76}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":20,"column":29},"generated":{"line":1,"column":98}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":20,"column":6},"generated":{"line":1,"column":100}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":20,"column":13},"generated":{"line":1,"column":106}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":25,"column":2},"generated":{"line":1,"column":108}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":26,"column":6},"generated":{"line":1,"column":120}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":26,"column":27},"generated":{"line":1,"column":122}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":27,"column":6},"generated":{"line":1,"column":124}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":28,"column":6},"generated":{"line":1,"column":126}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":28,"column":55},"generated":{"line":1,"column":128}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":29,"column":6},"generated":{"line":1,"column":130}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":21,"column":2},"generated":{"line":1,"column":133}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":21,"column":2},"generated":{"line":1,"column":138}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":21,"column":18},"generated":{"line":1,"column":152}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":21,"column":19},"generated":{"line":1,"column":153}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":21,"column":28},"generated":{"line":1,"column":161}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":30,"column":9},"generated":{"line":1,"column":175}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":30,"column":9},"generated":{"line":1,"column":180}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":30,"column":23},"generated":{"line":1,"column":192}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":31,"column":10},"generated":{"line":1,"column":194}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":31,"column":10},"generated":{"line":1,"column":200}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":31,"column":50},"generated":{"line":1,"column":202}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":31,"column":32},"generated":{"line":1,"column":214}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":31,"column":62},"generated":{"line":1,"column":216}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":31,"column":66},"generated":{"line":1,"column":218}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":32,"column":8},"generated":{"line":1,"column":220}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":32,"column":8},"generated":{"line":1,"column":224}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":33,"column":12},"generated":{"line":1,"column":226}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":33,"column":12},"generated":{"line":1,"column":233}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":34,"column":11},"generated":{"line":1,"column":236}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":34,"column":11},"generated":{"line":1,"column":240}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":35,"column":8},"generated":{"line":1,"column":251}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":35,"column":21},"generated":{"line":1,"column":253}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":36,"column":8},"generated":{"line":1,"column":255}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":37,"column":11},"generated":{"line":1,"column":261}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":37,"column":11},"generated":{"line":1,"column":265}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":38,"column":8},"generated":{"line":1,"column":275}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":38,"column":21},"generated":{"line":1,"column":277}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":39,"column":8},"generated":{"line":1,"column":279}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":40,"column":11},"generated":{"line":1,"column":285}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":40,"column":11},"generated":{"line":1,"column":289}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":41,"column":8},"generated":{"line":1,"column":296}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":41,"column":21},"generated":{"line":1,"column":298}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":42,"column":8},"generated":{"line":1,"column":300}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":43,"column":11},"generated":{"line":1,"column":306}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":43,"column":11},"generated":{"line":1,"column":310}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":44,"column":8},"generated":{"line":1,"column":320}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":44,"column":21},"generated":{"line":1,"column":322}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":45,"column":8},"generated":{"line":1,"column":324}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":46,"column":6},"generated":{"line":1,"column":330}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":47,"column":8},"generated":{"line":1,"column":338}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":47,"column":21},"generated":{"line":1,"column":340}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":50,"column":9},"generated":{"line":1,"column":342}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":50,"column":9},"generated":{"line":1,"column":347}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":53,"column":19},"generated":{"line":1,"column":476}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":77,"column":27},"generated":{"line":1,"column":1455}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":94,"column":27},"generated":{"line":1,"column":2139}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":105,"column":8},"generated":{"line":1,"column":2480}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":105,"column":50},"generated":{"line":1,"column":2512}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":108,"column":38},"generated":{"line":1,"column":2656}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":132,"column":38},"generated":{"line":1,"column":3604}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":136,"column":51},"generated":{"line":1,"column":3821}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":137,"column":51},"generated":{"line":1,"column":3879}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":139,"column":22},"generated":{"line":1,"column":3910}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":20,"column":29},"generated":{"line":1,"column":5058}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":20,"column":29},"generated":{"line":1,"column":5066}},{"source":"../../../../../tfjs-backend-webgl/src/transform_gpu.ts","name":null,"original":{"line":20,"column":29},"generated":{"line":1,"column":5083}}],"sources":{"../../../../../tfjs-backend-webgl/src/transform_gpu.ts":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class TransformProgram implements GPGPUProgram {\n  variableNames = ['Image', 'Transforms'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      imageHeight: number, imageWidth: number,\n      interpolation: 'nearest'|'bilinear',\n      fillMode: 'constant'|'reflect'|'wrap'|'nearest', fillValue: number,\n      outShape: [number, number, number, number]) {\n    this.outputShape = outShape;\n    const interpolationModeId = interpolation === 'nearest' ? 1 : 2;\n    let fillModeId;\n    switch (fillMode) {\n      case 'constant':\n        fillModeId = 1;\n        break;\n      case 'reflect':\n        fillModeId = 2;\n        break;\n      case 'wrap':\n        fillModeId = 3;\n        break;\n      case 'nearest':\n        fillModeId = 4;\n        break;\n      default:\n        fillModeId = 1;\n        break;\n    }\n    this.userCode = `\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${fillModeId} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${fillModeId} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${fillModeId} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${\n        imageHeight} && 0 <= coordX && coordX < ${imageWidth}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${fillValue});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${fillValue});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${imageWidth}));\n                float mapY = mapCoord(inY, float(${imageHeight}));\n\n                if (${interpolationModeId} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `;\n  }\n}\n"},"lineCount":null}},"error":null,"hash":"c3a623147a03fe1632ff51adc9a6b1dd","cacheData":{"env":{}}}